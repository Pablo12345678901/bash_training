#!/usr/bin/env bash

# Fill up my mp3 player with as many songs as will fit.
# N.B.: This assumes that the mp3 player is mounted on /media/mp3
#

#
# Obtient la taille du fichier en nombre de block (multiple de 512 octets arrondi à l'inférieur)
function FILESIZE
{
    # Par défaut, si aucun argument transmis = /dev/null (taille 0)
    FN=${1:-/dev/null}
    # Contrôle si fichier de n'importe quel type
    if [[ -e $FN ]] 
    then
        # FZ=$(stat -c '%b' "$FN") # gstat (GNU) -c retourne les info sous le format défini (ici '%b') avec un newline -> indique le nombre de block en tant que premier élément
        set -- $(ls -s "$FN") # attribue ce qui suit le '--' aux paramètres positionnels
        FZ=$1
    fi
}

# Calcul de l'espace libre sur le mp3
function FREESPACE
{
    # FREE=$(df /media/mp3 | awk '/^\/dev/ {print $4}')
    set -- $(df /media/mp3 | grep '^/dev/') # df : display free disk space 
    # récupère la ligne du disque monté (débute par '^/dev/') et assigne la valeur des éléments
    # aux paramètres positionnels
    # le 4ème état le nombre de block disponible
    FREE=$4
}

# subtract the (given) file size from the (global) free space
function REDUCE
(( FREE-=${1:-0}))      # Usuellement, corps fonction entre crochets mais toute expression
                        # composite fonctionne (tel que '(( CALCUL))')

#
# main:
#
let SUM=0                                            # <1>
let COUNT=0
# Export des variables pr qu'elles soient accessibles via les fonctions
# de mesure de la taille du fichier à ajouter et de la taille disponibles, et de la déduction de
# la taille du nouveau fichier.
# Fonctions : FILESIZE, FREESPACE, REDUCE.
export FZ 
export FREE

# Obtention de l'espace disponible
FREESPACE                                            # <2>

# Obtention des paths de tous les fichiers mp3 (extension mp3) du répertoire courant '.'
find . -name '*.mp3' -print | \                      # <3>
# Utilisation des paths
(   while read PATHNM                                  # <4>
    do
        # Obtention de la taille du fichier courant
        FILESIZE "$PATHNM"
        # Si la taille 'FZ' est plus petite (ou égale) à la taille dispo
        if ((FZ <= FREE))
        then
            # Copie du fichier
            echo loading $PATHNM
            cp "$PATHNM" /media/mp3
            # Si l'opération s'est bien passée
            if (( $? == 0 ))
            then
                # Adaptation de la somme totale
                let SUM+=FZ
                # Adapation du compteur
                let COUNT++
                # Réduction de la taille libre (non recalculée à chaque fois)
                REDUCE $FZ
            else
                echo "bad copy of $PATHNM to /media/mp3"
                # Suppression de l'éventuelle copie partielle
                rm -f /media/mp3/"${PATHNM##*/}"
                # Recalculer la taille diponible
                # recompute because we don't know how far it got
                FREESPACE
            fi
            # any reason to go on?
            if (( FREE <= 0 ))
            then
                break
            fi
        else
            # Pas de téléchargement du fichier car plus grand que
            # l'espace disponible donc passage au fichier suivant
            # S'il est plus petit que l'espace disponible
            # Il sera téléchargé
            echo skipping $PATHNM
        fi
    done
    printf "loaded %d songs (%d blocks)" $COUNT $SUM
    printf " onto /media/mp3 (%d blocks free)\n" $FREE
)
# end of script
