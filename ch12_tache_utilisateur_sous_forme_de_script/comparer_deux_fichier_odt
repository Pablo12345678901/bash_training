#!/usr/bin/env bash

# Syntaxe :
# $1 : FICHIER_ODT_1
# $2 : FICHIER_ODT_2

# cookbook filename: oodiff
# Compare le contenu de 2 fichiers odt (pas la mise en forme, juste le contenu)
# Dézippe les odt dans un répertoire temporaire 
# puis compare le contenu
# puis supprime les répertoires temporaires.
# works only on .odt files

# Affichage de la syntaxe + quitter
function usagexit ()
{
    echo "usage: ${0##*/} file1 file2"
    echo "where both files must be .odt files"
    exit $1
} >&2    
                                                
# assure two readable arg filenames which end in .odt       # <1>
# Test si 2 arguments fournis
if (( $# != 2 ))
then
    usagexit 1
fi
# Test si les argument ont l'extension odt
if [[ $1 != *.odt || $2 != *.odt ]]
then
    usagexit 2
fi
# Test s'il sont lisible (readable)
if [[ ! -r $1 || ! -r $2 ]]
then
    usagexit 3
fi

# Conserve le nom du fichier sans le path et sans l'extension '.odt'
BAS1=$(basename "$1" .odt)
BAS2=$(basename "$2" .odt)

# unzip them someplace private
# Création de nom basé sur un emplacement temporaire 'tmp'
# et sur le numéro du processus du shell '$$' suivi de l'extension '_1' ou '_2'
PRIV1="/tmp/${BAS1}.$$_1" # ici $$ est le numéro du processus - pas d'appel à '$_1'
PRIV2="/tmp/${BAS2}.$$_2"

# Récupération du path absolu du premier fichier odt sur la base du path absolu ou relatif
HERE=$PWD # Localisation courante
# Récupération du premier char (index 0) (longueur 1) du paramètre positionnel 1 (rappel : c'est le premier fichier odt)
#     ${parametre:decalage:longueur}
# Et comparaison si débute par '/'
if [[ ${1:0:1} == '/' ]]                                 # <2>
then
    # Si débute par '/' c'est un path absolu alors conservation
    FULL1="${1}"
else
    # Sinon, c'est un path relatif alors concaténation avec la localisation courante 'HERE'
    FULL1="${HERE}/${1}"
fi

# Idem pr le deuxième fichier odt
if [[ ${2:0:1} == '/' ]]
then
    FULL2="${2}"
else
    FULL2="${HERE}/${2}"
fi

# mkdir scratch areas and check for failure
# N.B. must have whitespace around the { and } and
#      must have the trailing ; in the {} lists
mkdir "$PRIV1" || { echo "Unable to mkdir '$PRIV1'" ; exit 4; }
mkdir "$PRIV2" || { echo "Unable to mkdir '$PRIV2'" ; exit 5; }

# Déplacement dans le nouveau répertoire
cd "$PRIV1"
unzip -q "$FULL1"
# unzip va extraire les fichiers depuis l'odt FULL1 dans le répertoire PRIV1
# unzip -q : mode silencieux

# Remplacement des balises '<' par '\\n<' et '>' par '>\\n'                 # <3>
# par sed et écriture dans un nouveau fichier         
# Retour à la ligne volontaire -> avant et après chaque balise XML pour les rendre plus lisibles
sed -e 's/>/>\
/g' -e 's/</\
</g' content.xml > contentwnl.xml

# Idem pour le deuxième fichier
cd "$PRIV2"
unzip -q "$FULL2"
sed -e 's/>/>\
/g' -e 's/</\
</g' content.xml > contentwnl.xml

# Retour à la localisation initiale d'avant décompression
cd "$HERE"

# Comparaison des fichiers avec diff :
# The diff utility compares the contents of file1 and file2
# and writes to the standard output the list of changes
# necessary to convert one file into the other.
# No output is produced if the files are identical.
diff "${PRIV1}/contentwnl.xml" "${PRIV2}/contentwnl.xml"

MESSAGE_AVANT_SUPPRESSION="Tapez enter pour supprimer les répertoire temporaire
$PRIV1
et
$PRIV2
et terminer le script
-> "
read -p "$MESSAGE_AVANT_SUPPRESSION"


# Suppression des répertoires temporaires
rm -rf "$PRIV1" "$PRIV2"
