#!/usr/bin/env bash

source fonctions_personnelles

# Syntaxe
SYNTAXE="$(syntaxe_afficher_si_erreur "$(basename $0)" "-f FICHIER_OU_REPERTOIRE" "-r REGEX_RECHERCHE" "-s STRING_REMPLACEMENT" )"

#
FLAG_OPTION_F= # FICHIER_OU_REPERTOIRE
FLAG_OPTION_R= # REGEX_RECHERCHE
FLAG_OPTION_S= # STRING_REMPLACEMENT

# Contrôle des arguments
while getopts 'f:r:s:' OPTION # le résultat de getopts à chaque boucle est stocké dans $OPTION
do
    case $OPTION in
        f )     FLAG_OPTION_F=1
                FICHIER_OU_REPERTOIRE="$OPTARG"
                if [[ -d "$FICHIER_OU_REPERTOIRE" || -f "$FICHIER_OU_REPERTOIRE" ]]
                then
                    :
                else
                    echo -e "\nERREUR : \"$FICHIER_OU_REPERTOIRE\" n'est pas un fichier/répertoire.\n"
                    echo -e "$SYNTAXE"
                    exit 1
                fi
                ;;
        r )     FLAG_OPTION_R=1
                REGEX_RECHERCHE="$OPTARG"
                ;;
        s )     FLAG_OPTION_S=1
                STRING_REMPLACEMENT="$OPTARG"
                ;;
        ?)      printf "%b" "$SYNTAXE" >&2
                exit 1
                ;;
    esac
done
shift $(($OPTIND - 1)) # décalage en supprimant les options acquises

# Contrôle que pas d'autres arguments
if [ -z "$1" ]
then
    :
else
    echo -e "\nERREUR : trop d'argument fourni. Arguments en trop \"$*\".\n"
    echo -e "$SYNTAXE"
    exit 1
fi

# Contrôle que tous les arguments ont été fournis
if [[ "$FLAG_OPTION_F" && "$FLAG_OPTION_R" && "$FLAG_OPTION_S" ]]
then
    :
else
    echo -e "\nERREUR : il manque un/plusieurs argument(s).\n"
    echo -e "$SYNTAXE"
    exit 1
fi

# Résultat final de la commande
printf "\nCommande typée :\n\n%s %s %s %s %s %s %s\n\n" "$(basename $0)" "-f" "$FICHIER_OU_REPERTOIRE" "-r" "$REGEX_RECHERCHE" "-s" "$STRING_REMPLACEMENT"
